name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    name: Create Release
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install SwiftGen
        run: brew install swiftgen

      - name: Build Packages
        run: |
          make VERSION=${{ env.VERSION }} dmg

      - name: Verify Architecture Support
        run: |
          echo "==> Check release version architecture compatibility..."
          make check-arch

      - name: Get Release Draft
        id: get_draft
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Try to get existing draft release
          DRAFT_ID=$(gh release list --json isDraft,tagName,id | jq -r '.[] | select(.isDraft == true) | .id' | head -1)
          
          if [ -n "$DRAFT_ID" ] && [ "$DRAFT_ID" != "null" ]; then
            echo "Found existing draft release: $DRAFT_ID"
            echo "draft_id=$DRAFT_ID" >> $GITHUB_OUTPUT
            
            # Get the draft release body
            gh release view --json body | jq -r '.body' > release_notes.md
          else
            echo "No draft release found, generating basic release notes..."
            echo "draft_id=" >> $GITHUB_OUTPUT
            
            # Fallback: generate basic release notes
            gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              /repos/${{ github.repository }}/releases/generate-notes \
              -f tag_name='${{ env.VERSION }}' | jq -r '.body' > release_notes.md
          fi

      - name: Create or Update Release
        id: create_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "${{ steps.get_draft.outputs.draft_id }}" ]; then
            echo "Publishing existing draft release..."
            
            # Update the draft release to published and add assets
            gh release edit ${{ steps.get_draft.outputs.draft_id }} \
              --draft=false \
              --tag=${{ env.VERSION }} \
              --title="${{ env.VERSION }}"
            
            # Upload assets to the existing release
            gh release upload ${{ env.VERSION }} \
              build/ConfigForge-x86_64.dmg \
              build/ConfigForge-arm64.dmg \
              --clobber
              
            echo "Release published successfully from draft"
          else
            echo "Creating new release..."
            
            # Create new release using softprops action as fallback
            gh release create ${{ env.VERSION }} \
              --title "${{ env.VERSION }}" \
              --notes-file release_notes.md \
              --draft=false \
              --prerelease=false \
              build/ConfigForge-x86_64.dmg \
              build/ConfigForge-arm64.dmg
              
            echo "New release created successfully"
          fi

      - name: Trigger Homebrew Update
        #Trigger workflow only when release is successful
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_PAT }}
          event-type: trigger-homebrew-update
          client-payload: '{"version": "${{ env.VERSION }}"}'

      - name: Update Latest Tag
        run: |
          git tag -f latest
          git push origin latest --force 